@using Todo.Controllers
@using Todo.Data.Entities
@using Todo.Services
@model Todo.Models.TodoLists.TodoListDetailViewmodel

@{
    ViewData["Title"] = $"List: {Model.Title}";
}

<h2>@ViewData["Title"]</h2>

<div class="col-md-6">
    <div class="row">
        <div class="col-xs-12">
            <div class="row">
                <div class="col-xs-6 text-left">
                    <a asp-action="Create" asp-controller="TodoItem" asp-route-todoListId="@Model.TodoListId">
                        <strong>Add New Item</strong>
                    </a>

                    <div>
                        @Html.Partial("../TodoItem/_AddTodoItemPartial", new Todo.Models.TodoItems.TodoItemCreateFields
                   {
                       TodoListId = Model.TodoListId
                   })
                    </div>
                    
                </div>
            </div>
        </div>
    </div>

    <ul class="list-group">
        <li class="list-group-item">
            <div class="text-right">
                <label for="sortOptions" class="form-label">Sort By:</label>
                <select id="sortOptions" class="form-select" onchange="window.location.href=this.value;">
                    <option value="@Url.Action("Detail", new { todoListId = Model.TodoListId, sortBy = "importance", order = "desc" })">Importance (Desc)</option>
                    <option value="@Url.Action("Detail", new { todoListId = Model.TodoListId, sortBy = "importance", order = "asc" })">Importance (Asc)</option>
                    <option value="@Url.Action("Detail", new { todoListId = Model.TodoListId, sortBy = "rank", order = "desc" })">Rank (Desc)</option>
                    <option value="@Url.Action("Detail", new { todoListId = Model.TodoListId, sortBy = "rank", order = "asc" })">Rank (Asc)</option>
                </select>
            </div>
        </li>
        @* @foreach (var item in Model.Items.OrderByDescending(item => item.Importance))) *@

        @foreach (var item in Model.Items)
        {
            var emailHash = Gravatar.GetHash(item.ResponsibleParty.Email); // Assuming you have a Gravatar hash utility method
            var userId = item.ResponsibleParty.Email.Replace("@", "").Replace(".", ""); // Create a safe ID for HTML elements


            string contextualClass;
            switch (item.Importance)
            {
                case Importance.High:
                    contextualClass = "list-group-item-danger";
                    break;
                case Importance.Low:
                    contextualClass = "list-group-item-info";
                    break;
                default:
                    contextualClass = "";
                    break;
            }

            <li class="list-group-item @contextualClass @(item.IsDone ? "completed-item" : "")">
                <div class="row">
                    <div class="col-md-8">
                        <a asp-action="Edit" asp-controller="TodoItem" asp-route-todoItemId="@item.TodoItemId">

                            @if (item.IsDone)
                            {
                                <s>@item.Title</s>
                            }
                            else
                            {
                                <text>@item.Title</text>
                            }
                        </a>
                    </div>
                   @{
                    var profile = await @Gravatar.GetGravatarUser(item.ResponsibleParty.Email);
                    <div class="col-md-4 text-right">
    <small>
        <div class="row">
            <div class="col-xs-9 text-left">
                <div class="text-uppercase">@profile.DisplayName</div>
                <div>@profile.EmailAddress</div>
            </div>
            <div class="col-xs-3 text-right">
                <img src="@profile.AvatarUrl?s=30" class="img-circle" alt="Avatar" />
            </div>
        </div>
    </small>
</div>
                    }
                </div>

            </li>
        }
    </ul>
    <div>
        <button id="toggleCompleted" class="btn btn-secondary" onclick="toggleCompletedItems()">
            Completed (@Model.Items.Count(item => item.IsDone))
        </button>
    </div>

</div>

<script>
    function toggleCompletedItems() {
        const completedItems = document.querySelectorAll(".completed-item");
        completedItems.forEach(item => {
            item.style.display = (item.style.display === "none") ? "" : "none";
        });
    }

    document.addEventListener("DOMContentLoaded", () => {
        const urlParams = new URLSearchParams(window.location.search);
        const sortBy = urlParams.get("sortBy") || "importance"; // Default to 'importance'
        const order = urlParams.get("order") || "desc"; // Default to 'asc'

        const dropdown = document.getElementById("sortOptions");
        for (const option of dropdown.options) {
            if (option.value.includes(`sortBy=${sortBy}`) && option.value.includes(`order=${order}`)) {
                option.selected = true;
                break;
            }
        }
    });

</script>